* vim-like bindings (see PyanoH3ro)
* tracker but with note push and note hold functionality
    * step: "smallest" resolution of the tracker
        * can correspond to whatever, but recommended as sixteenth notes
    * 5 players
        * 3 oscillators per player, all track commands have a `Mask` argument
            which determines which oscillators should play
            * we'll need to try and converge phases when the pitch is the same
                for all oscillators, otherwise we could have destructive interference
* track commands
    * pitch(Rel, Mask: All): sets the pitch for the oscillators
        * Rel: i8, measured from the current scale's "center note" (e.g., A4 - G4)
        * Mask: u3 - affects pitch for which oscillators
    * pitch_delta(Rel_desired, Steps, Mask: All)
        * Rel_desired: i8, desired pitch, relative to the current scale's "center note"
        * Steps: u8, number of steps before we get from the current to the desired pitch
    * mode(Mode, Mask: All), where Mode is an enum describing what we do for notes
        * mode normal(Push, Hold_fine): hold the note for `On` and turn off for `Off`
            * Push: i8, negative starts the note early, positive means start it late
                * +-120 is a full step ahead/behind
                * this gets added to any existing note push, but we won't start a note
                    earlier than one step ahead.
            * Hold_fine: i8, negative makes it staccato, positive makes it longer
                * +-120 is a full step added/removed
                * holding can add to note push.
        * mode apreggio(Arp): do arpeggios while the note is `On`, Arp an enum:
            * arp 
    * note(On, Off, Push: 0, Mask: All)
        * On: u8, in steps.
            * amount of time to hold the note
        * Off: u8, in steps = Length - On
            * amount of time to wait after holding the note before we play the next
        * Push: i8, negative starts the note early, positive means start it late
            * +-120 is a full step ahead/behind
        * [derived] Length: u8, in steps = On + Off
            * amount of time before we play the next note
    * rest(Steps, Mask: All): note(On: 0, Off: Steps, Mask)  -- thin wrapper around note.
        * Steps: u8, number of steps to rest for
    * volume(Vol, Mask: All)
        * Vol: u8, maps logarithmically to a float amplitude (0 -> 0.0, 255 -> 1.0)
        * ln(1.0 + (E - 1.0) * (Vol / 255.0))   where Vol is 0-255 and E = 2.71828...
    * volume_delta(Vol_desired, Steps, Mask: All)
        * Vol_desired: u8, desired volume after steps
        * Steps: u8, number of steps before we get to the desired volume
* instruments
    * 
* save format
    * tracks
        X: track{
          0:note(...)
          ...
        999:note(...)
        }
    * instruments

